// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkflowLib.ECommerce.FoodDelivery.Core.DbContexts;

#nullable disable

namespace WorkflowLib.ECommerce.FoodDelivery.Core.Migrations
{
    [DbContext(typeof(FoodDeliveryDbContext))]
    [Migration("20250607121058_PluralizeEntities")]
    partial class PluralizeEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CompanyContract", b =>
                {
                    b.Property<long>("ContractsId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerCompaniesId")
                        .HasColumnType("bigint");

                    b.HasKey("ContractsId", "CustomerCompaniesId");

                    b.HasIndex("CustomerCompaniesId");

                    b.ToTable("CompanyContract");
                });

            modelBuilder.Entity("CompanyEmployee", b =>
                {
                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("CompanyEmployee");
                });

            modelBuilder.Entity("ContractCustomer", b =>
                {
                    b.Property<long>("ContractsId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomersId")
                        .HasColumnType("bigint");

                    b.HasKey("ContractsId", "CustomersId");

                    b.HasIndex("CustomersId");

                    b.ToTable("ContractCustomer");
                });

            modelBuilder.Entity("ContractEmployee", b =>
                {
                    b.Property<long>("ContractsId")
                        .HasColumnType("bigint");

                    b.Property<long>("OurEmployeesId")
                        .HasColumnType("bigint");

                    b.HasKey("ContractsId", "OurEmployeesId");

                    b.HasIndex("OurEmployeesId");

                    b.ToTable("ContractEmployee");
                });

            modelBuilder.Entity("ContractOrganization", b =>
                {
                    b.Property<long>("ContractsId")
                        .HasColumnType("bigint");

                    b.Property<long>("OurOrganizationsId")
                        .HasColumnType("bigint");

                    b.HasKey("ContractsId", "OurOrganizationsId");

                    b.HasIndex("OurOrganizationsId");

                    b.ToTable("ContractOrganization");
                });

            modelBuilder.Entity("EmployeeOrganizationItem", b =>
                {
                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationItemsId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeesId", "OrganizationItemsId");

                    b.HasIndex("OrganizationItemsId");

                    b.ToTable("EmployeeOrganizationItem");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.BusinessTaskDeliveryOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("BusinessTaskId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DeliveryOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessTaskId");

                    b.HasIndex("DeliveryOrderId");

                    b.ToTable("BusinessTaskDeliveryOrders");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<int?>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.InitialOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<long?>("CookingOperationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DeliveryOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("UserUid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CookingOperationId");

                    b.ToTable("InitialOrders");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AdditonalPrice")
                        .HasColumnType("numeric");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<bool>("CouldBeCancelled")
                        .HasColumnType("boolean");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<string>("CustomerUid")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndActual")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndExpected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartActual")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartExpected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExecutorName")
                        .HasColumnType("text");

                    b.Property<string>("ExecutorUid")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int?>("OrderCustomerType")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderExecutorType")
                        .HasColumnType("integer");

                    b.Property<long?>("ParentOrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ProductsPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<decimal>("TaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentOrderId");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Order");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.Ingredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("FinalProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IngredientProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<long?>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FinalProductId");

                    b.HasIndex("IngredientProductId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.InitialOrderIngredient", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("CookingOperationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InitialOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InitialOrderProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CookingOperationId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("InitialOrderId");

                    b.HasIndex("InitialOrderProductId");

                    b.ToTable("InitialOrderIngredients");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.Recipe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Customers.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrmRoleType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("HasVatRegistration")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("VatNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Customers.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("HomePhone")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OfficeEmail")
                        .HasColumnType("text");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Customers.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<int>("CrmRoleType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<long?>("UserAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Customers.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BodyText")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("ReceiverId")
                        .HasColumnType("bigint");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("TitleText")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Delivery.DeliveryMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AuthProviderType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmployDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("ICQ")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Locale")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("ReplacementMode")
                        .HasColumnType("integer");

                    b.Property<string>("Skype")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.EmployeeUserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<long?>("UserAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("EmployeeUserAccounts");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("HeadItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("HeadItemId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.OrganizationItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("HardDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<long?>("ParentItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.ToTable("OrganizationItems");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.Skill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastSeenDt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.UserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorChangedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorCreatedId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsGroupByDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorChangedId");

                    b.HasIndex("AuthorCreatedId");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.MeasurementUnits.WeightUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WeightUnits");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Monetary.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Payer")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("Receiver")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.Container", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PackTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sscc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PackTypeId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.Lot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PackTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PackTypeId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.PackType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PackTypeMaterialId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.Property<long?>("WeightUnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PackTypeMaterialId");

                    b.HasIndex("WeightUnitId");

                    b.ToTable("PackTypes");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.PackTypeMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PackTypeMaterials");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.Tray", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("PackTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PackTypeId");

                    b.ToTable("Tray");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessDiagram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BusinessDiagrams");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessDiagramElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BusinessDiagramId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessDiagramId");

                    b.ToTable("BusinessDiagramElements");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessProcess", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("DiagramId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("VersionNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagramId");

                    b.HasIndex("ParentId");

                    b.ToTable("BusinessProcesses");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessProcessState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("BusinessProcessId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessId");

                    b.ToTable("BusinessProcessStates");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("BusinessProcessStateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndActual")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndExpected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartActual")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartExpected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("ExecutorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExecutorIsEmulationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ExecutorReplacedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ExpiredNotificationSent")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEmulation")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BusinessProcessStateId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("ExecutorIsEmulationId");

                    b.HasIndex("ExecutorReplacedId");

                    b.HasIndex("ParentTaskId");

                    b.ToTable("BusinessTasks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BusinessTask");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.DeliveryOrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<long?>("ContainerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePackaging")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateProduction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DeliveryOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("LotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("TrayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex("LotId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TrayId");

                    b.ToTable("DeliveryOrderProducts");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.InitialOrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<long?>("ContainerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CookingOperationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePackaging")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateProduction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("InitialOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("TrayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("CookingOperationId");

                    b.HasIndex("InitialOrderId");

                    b.HasIndex("LotId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TrayId");

                    b.ToTable("InitialOrderProducts");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.OrderProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<long?>("ContainerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePackaging")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateProduction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("LotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("TrayId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("LotId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TrayId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DaysToExpiration")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PictureDescription")
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<long?>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.ProductCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PictureDescription")
                        .HasColumnType("text");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<int?>("ProductCategoryType")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.ProductTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("BusinessOperationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DeliveryOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryOrderProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("NewQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("NewStatus")
                        .HasColumnType("text");

                    b.Property<double?>("OldQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("OldStatus")
                        .HasColumnType("text");

                    b.Property<long?>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrderProductId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<double>("QuantityDelta")
                        .HasColumnType("double precision");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<long?>("WHProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex("DeliveryOrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderProductId");

                    b.HasIndex("ParentId");

                    b.HasIndex("WHProductId");

                    b.ToTable("ProductTransfers");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.WHProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DatePackaging")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateProduction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("numeric");

                    b.Property<int>("MinQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("MinWeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.Property<long?>("WeightUnitId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WeightUnitId");

                    b.ToTable("WHProducts");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<int>("CompletePercent")
                        .HasColumnType("integer");

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndActual")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEndExpected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartActual")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStartExpected")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("GuaranteePeriodInMonths")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.ProjectPhase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectPlanItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPlanItemId");

                    b.ToTable("ProjectPhase");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.ProjectPlanItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer");

                    b.Property<long?>("ProjectPlanItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPlanItemId");

                    b.ToTable("ProjectPlanItem");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.RiskManagement.Risk", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorChangedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthorResolvedId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("BusinessTaskId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommentResolved")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorChangedId");

                    b.HasIndex("AuthorCreatedId");

                    b.HasIndex("AuthorResolvedId");

                    b.HasIndex("BusinessTaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Risk");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.SocialCommunication.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorCreatedId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BusinessEntityStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("BusinessTaskId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorCreatedId");

                    b.HasIndex("BusinessTaskId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.DeliveryOrder", b =>
                {
                    b.HasBaseType("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order");

                    b.Property<long?>("DeliveryMethodId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("DeliveryPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .HasColumnType("text");

                    b.Property<long?>("ParentDeliveryOrderId")
                        .HasColumnType("bigint");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("ParentDeliveryOrderId");

                    b.HasDiscriminator().HasValue("DeliveryOrder");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.CookingOperation", b =>
                {
                    b.HasBaseType("WorkflowLib.Shared.Models.Business.Processes.BusinessTask");

                    b.HasDiscriminator().HasValue("CookingOperation");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Delivery.DeliveryOperation", b =>
                {
                    b.HasBaseType("WorkflowLib.Shared.Models.Business.Processes.BusinessTask");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.Property<long?>("DeliveryMethodId")
                        .HasColumnType("bigint");

                    b.Property<string>("DeliveryOperationType")
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<string>("GeneratedOrderQrCode")
                        .HasColumnType("text");

                    b.Property<bool?>("IsInternal")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .HasColumnType("text");

                    b.HasIndex("ContactId");

                    b.HasIndex("DeliveryMethodId");

                    b.HasDiscriminator().HasValue("DeliveryOperation");
                });

            modelBuilder.Entity("CompanyContract", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Company", null)
                        .WithMany()
                        .HasForeignKey("CustomerCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyEmployee", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractCustomer", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractEmployee", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", null)
                        .WithMany()
                        .HasForeignKey("OurEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContractOrganization", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Contract", null)
                        .WithMany()
                        .HasForeignKey("ContractsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Organization", null)
                        .WithMany()
                        .HasForeignKey("OurOrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeOrganizationItem", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.OrganizationItem", null)
                        .WithMany()
                        .HasForeignKey("OrganizationItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.BusinessTaskDeliveryOrder", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessTask", "BusinessTask")
                        .WithMany()
                        .HasForeignKey("BusinessTaskId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.DeliveryOrder", "DeliveryOrder")
                        .WithMany()
                        .HasForeignKey("DeliveryOrderId");

                    b.Navigation("BusinessTask");

                    b.Navigation("DeliveryOrder");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.InitialOrder", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Cooking.CookingOperation", null)
                        .WithMany("InitialOrders")
                        .HasForeignKey("CookingOperationId");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order", "ParentOrder")
                        .WithMany()
                        .HasForeignKey("ParentOrderId");

                    b.Navigation("ParentOrder");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.Ingredient", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.Product", "FinalProduct")
                        .WithMany()
                        .HasForeignKey("FinalProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.Product", "IngredientProduct")
                        .WithMany()
                        .HasForeignKey("IngredientProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Cooking.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId");

                    b.Navigation("FinalProduct");

                    b.Navigation("IngredientProduct");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.InitialOrderIngredient", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Cooking.CookingOperation", null)
                        .WithMany("InitialOrderIngredients")
                        .HasForeignKey("CookingOperationId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Cooking.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.InitialOrder", "InitialOrder")
                        .WithMany()
                        .HasForeignKey("InitialOrderId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.InitialOrderProduct", "InitialOrderProduct")
                        .WithMany()
                        .HasForeignKey("InitialOrderProductId");

                    b.Navigation("Ingredient");

                    b.Navigation("InitialOrder");

                    b.Navigation("InitialOrderProduct");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.Recipe", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Customers.Company", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Customers.Customer", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId");

                    b.Navigation("Company");

                    b.Navigation("Contact");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.EmployeeUserAccount", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId");

                    b.Navigation("Employee");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.Organization", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.OrganizationItem", "HeadItem")
                        .WithMany()
                        .HasForeignKey("HeadItemId");

                    b.Navigation("Company");

                    b.Navigation("HeadItem");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.OrganizationItem", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.OrganizationItem", "ParentItem")
                        .WithMany("SubItems")
                        .HasForeignKey("ParentItemId");

                    b.Navigation("ParentItem");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.Skill", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", null)
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.UserGroup", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "AuthorChanged")
                        .WithMany()
                        .HasForeignKey("AuthorChangedId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId");

                    b.Navigation("AuthorChanged");

                    b.Navigation("AuthorCreated");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Monetary.Payment", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order", null)
                        .WithMany("Payments")
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.Container", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.PackType", "PackType")
                        .WithMany()
                        .HasForeignKey("PackTypeId");

                    b.Navigation("PackType");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.Lot", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.PackType", "PackType")
                        .WithMany()
                        .HasForeignKey("PackTypeId");

                    b.Navigation("PackType");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.PackType", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.PackTypeMaterial", "PackTypeMaterial")
                        .WithMany()
                        .HasForeignKey("PackTypeMaterialId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.MeasurementUnits.WeightUnit", "WeightUnit")
                        .WithMany()
                        .HasForeignKey("WeightUnitId");

                    b.Navigation("PackTypeMaterial");

                    b.Navigation("WeightUnit");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Packing.Tray", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.PackType", "PackType")
                        .WithMany()
                        .HasForeignKey("PackTypeId");

                    b.Navigation("PackType");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessDiagramElement", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessDiagram", null)
                        .WithMany("Elements")
                        .HasForeignKey("BusinessDiagramId");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessProcess", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessDiagram", "Diagram")
                        .WithMany()
                        .HasForeignKey("DiagramId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessProcess", "Parent")
                        .WithMany("SubProcesses")
                        .HasForeignKey("ParentId");

                    b.Navigation("Diagram");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessProcessState", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessProcess", "BusinessProcess")
                        .WithMany()
                        .HasForeignKey("BusinessProcessId");

                    b.Navigation("BusinessProcess");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessTask", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessProcessState", "BusinessProcessState")
                        .WithMany()
                        .HasForeignKey("BusinessProcessStateId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "ExecutorIsEmulation")
                        .WithMany()
                        .HasForeignKey("ExecutorIsEmulationId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "ExecutorReplaced")
                        .WithMany()
                        .HasForeignKey("ExecutorReplacedId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessTask", "ParentTask")
                        .WithMany("ChildTasks")
                        .HasForeignKey("ParentTaskId");

                    b.Navigation("BusinessProcessState");

                    b.Navigation("Executor");

                    b.Navigation("ExecutorIsEmulation");

                    b.Navigation("ExecutorReplaced");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.DeliveryOrderProduct", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.DeliveryOrder", "DeliveryOrder")
                        .WithMany()
                        .HasForeignKey("DeliveryOrderId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Tray", "Tray")
                        .WithMany()
                        .HasForeignKey("TrayId");

                    b.Navigation("Container");

                    b.Navigation("DeliveryOrder");

                    b.Navigation("Lot");

                    b.Navigation("Product");

                    b.Navigation("Tray");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.InitialOrderProduct", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Cooking.CookingOperation", null)
                        .WithMany("InitialOrderProducts")
                        .HasForeignKey("CookingOperationId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.InitialOrder", "InitialOrder")
                        .WithMany()
                        .HasForeignKey("InitialOrderId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Tray", "Tray")
                        .WithMany()
                        .HasForeignKey("TrayId");

                    b.Navigation("Container");

                    b.Navigation("InitialOrder");

                    b.Navigation("Lot");

                    b.Navigation("Product");

                    b.Navigation("Tray");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.OrderProduct", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Container", "Container")
                        .WithMany()
                        .HasForeignKey("ContainerId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Lot", "Lot")
                        .WithMany()
                        .HasForeignKey("LotId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Packing.Tray", "Tray")
                        .WithMany()
                        .HasForeignKey("TrayId");

                    b.Navigation("Container");

                    b.Navigation("Lot");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Tray");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.Product", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.ProductTransfer", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.DeliveryOrder", "DeliveryOrder")
                        .WithMany()
                        .HasForeignKey("DeliveryOrderId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.DeliveryOrderProduct", "DeliveryOrderProduct")
                        .WithMany()
                        .HasForeignKey("DeliveryOrderProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.OrderProduct", "OrderProduct")
                        .WithMany()
                        .HasForeignKey("OrderProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.ProductTransfer", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.WHProduct", "WHProduct")
                        .WithMany()
                        .HasForeignKey("WHProductId");

                    b.Navigation("DeliveryOrder");

                    b.Navigation("DeliveryOrderProduct");

                    b.Navigation("Order");

                    b.Navigation("OrderProduct");

                    b.Navigation("Parent");

                    b.Navigation("WHProduct");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.WHProduct", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.MeasurementUnits.WeightUnit", "WeightUnit")
                        .WithMany()
                        .HasForeignKey("WeightUnitId");

                    b.Navigation("Product");

                    b.Navigation("WeightUnit");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.Project", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Company");

                    b.Navigation("Contract");

                    b.Navigation("Customer");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.ProjectPhase", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Projects.Project", "Project")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("ProjectId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Projects.ProjectPlanItem", "ProjectPlanItem")
                        .WithMany()
                        .HasForeignKey("ProjectPlanItemId");

                    b.Navigation("Project");

                    b.Navigation("ProjectPlanItem");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.ProjectPlanItem", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Projects.ProjectPlanItem", null)
                        .WithMany("Items")
                        .HasForeignKey("ProjectPlanItemId");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.RiskManagement.Risk", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", "AuthorChanged")
                        .WithMany()
                        .HasForeignKey("AuthorChangedId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", "AuthorResolved")
                        .WithMany()
                        .HasForeignKey("AuthorResolvedId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessTask", null)
                        .WithMany("Risks")
                        .HasForeignKey("BusinessTaskId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Projects.Project", null)
                        .WithMany("Risks")
                        .HasForeignKey("ProjectId");

                    b.Navigation("AuthorChanged");

                    b.Navigation("AuthorCreated");

                    b.Navigation("AuthorResolved");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.SocialCommunication.Comment", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.InformationSystem.UserAccount", "AuthorCreated")
                        .WithMany()
                        .HasForeignKey("AuthorCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowLib.Shared.Models.Business.Processes.BusinessTask", null)
                        .WithMany("Comments")
                        .HasForeignKey("BusinessTaskId");

                    b.Navigation("AuthorCreated");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.DeliveryOrder", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Delivery.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.BusinessDocuments.DeliveryOrder", "ParentDeliveryOrder")
                        .WithMany()
                        .HasForeignKey("ParentDeliveryOrderId");

                    b.Navigation("DeliveryMethod");

                    b.Navigation("ParentDeliveryOrder");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Delivery.DeliveryOperation", b =>
                {
                    b.HasOne("WorkflowLib.Shared.Models.Business.Customers.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("WorkflowLib.Shared.Models.Business.Delivery.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId");

                    b.Navigation("Contact");

                    b.Navigation("DeliveryMethod");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.BusinessDocuments.Order", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Customers.Company", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.Employee", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.InformationSystem.OrganizationItem", b =>
                {
                    b.Navigation("SubItems");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessDiagram", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessProcess", b =>
                {
                    b.Navigation("SubProcesses");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Processes.BusinessTask", b =>
                {
                    b.Navigation("ChildTasks");

                    b.Navigation("Comments");

                    b.Navigation("Risks");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Products.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.Project", b =>
                {
                    b.Navigation("ProjectPhases");

                    b.Navigation("Risks");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Projects.ProjectPlanItem", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WorkflowLib.Shared.Models.Business.Cooking.CookingOperation", b =>
                {
                    b.Navigation("InitialOrderIngredients");

                    b.Navigation("InitialOrderProducts");

                    b.Navigation("InitialOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
